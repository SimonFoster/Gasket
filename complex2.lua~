module( ..., package.seeall )

Complex = {};  Complex.__index = Complex

function Complex.new( a, b )
    o = { a, b }
    return setmetatable( o, Complex )
end

function Complex.__add( op1, op2 )
    if getmetatable( op1 ) == Complex 
        and getmetatable( op2 ) == Complex then
        local a, b = unpack( op1 )
        local c, d = unpack( op2 )
        return Complex.new( a + c, b + d )
    elseif getmetatable( op1 ) == Complex 
        and type( op2 ) == 'number' then
        local a, b = unpack( op1 )
        return Complex.new( a + op2, b )
    elseif getmetatable( op2 ) == Complex 
        and type( op1 ) == 'number' then
        local a, b = unpack( op2 )
        return Complex.new( a + op1, b )
    else
        assert( false )
    end
end

function Complex.__mul( op1, op2 )
    if getmetatable( op1 ) == Complex 
        and getmetatable( op2 ) == Complex then
        local a, b = unpack( op1 )
        local c, d = unpack( op2 )
        local real = ( a * c ) - ( b * d )
        local imag = ( a * d ) + ( b * c )
        return Complex.new( real, imag )
    elseif getmetatable( op1 ) == Complex 
        and type( op2 ) == 'number' then
        local a, b = unpack( op1 )
        return Complex.new( a * op2, b * op2 )
    elseif getmetatable( op2 ) == Complex 
        and type( op1 ) == 'number' then
        local a, b = unpack( op2 )
        return Complex.new( a * op1, b * op1 )
    else
        assert( false )
    end
end
